// Generated by Peggy 1.2.0.
//
// https://peggyjs.org/
(function(root, factory) {
  if (typeof define === "function" && define.amd) {
    define([], factory);
  } else if (typeof module === "object" && module.exports) {
    module.exports = factory();
  }
})(this, function() {
  "use strict";

  function peg$subclass(child, parent) {
    function C() { this.constructor = child; }
    C.prototype = parent.prototype;
    child.prototype = new C();
  }

  function peg$SyntaxError(message, expected, found, location) {
    var self = Error.call(this, message);
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(self, peg$SyntaxError.prototype);
    }
    self.expected = expected;
    self.found = found;
    self.location = location;
    self.name = "SyntaxError";
    return self;
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$padEnd(str, targetLength, padString) {
    padString = padString || " ";
    if (str.length > targetLength) { return str; }
    targetLength -= str.length;
    padString += padString.repeat(targetLength);
    return str + padString.slice(0, targetLength);
  }

  peg$SyntaxError.prototype.format = function(sources) {
    var str = "Error: " + this.message;
    if (this.location) {
      var src = null;
      var k;
      for (k = 0; k < sources.length; k++) {
        if (sources[k].source === this.location.source) {
          src = sources[k].text.split(/\r\n|\n|\r/g);
          break;
        }
      }
      var s = this.location.start;
      var loc = this.location.source + ":" + s.line + ":" + s.column;
      if (src) {
        var e = this.location.end;
        var filler = peg$padEnd("", s.line.toString().length);
        var line = src[s.line - 1];
        var last = s.line === e.line ? e.column : line.length + 1;
        str += "\n --> " + loc + "\n"
            + filler + " |\n"
            + s.line + " | " + line + "\n"
            + filler + " | " + peg$padEnd("", s.column - 1)
            + peg$padEnd("", last - s.column, "^");
      } else {
        str += "\n at " + loc;
      }
    }
    return str;
  };

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
      literal: function(expectation) {
        return "\"" + literalEscape(expectation.text) + "\"";
      },

      class: function(expectation) {
        var escapedParts = expectation.parts.map(function(part) {
          return Array.isArray(part)
            ? classEscape(part[0]) + "-" + classEscape(part[1])
            : classEscape(part);
        });

        return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
      },

      any: function() {
        return "any character";
      },

      end: function() {
        return "end of input";
      },

      other: function(expectation) {
        return expectation.description;
      }
    };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = expected.map(describeExpectation);
      var i, j;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== undefined ? options : {};

    var peg$FAILED = {};
    var peg$source = options.grammarSource;

    var peg$startRuleFunctions = { Root: peg$parseRoot };
    var peg$startRuleFunction = peg$parseRoot;

    var peg$c0 = "one";
    var peg$c1 = "two";
    var peg$c2 = "three";
    var peg$c3 = "four";
    var peg$c4 = "five";
    var peg$c5 = "six";
    var peg$c6 = "seven";
    var peg$c7 = "eight";
    var peg$c8 = "nine";
    var peg$c9 = "ten";
    var peg$c10 = "eleven";
    var peg$c11 = "twelve";
    var peg$c12 = "1";
    var peg$c13 = "once";
    var peg$c14 = "twice";
    var peg$c15 = "thrice";
    var peg$c16 = "an";
    var peg$c17 = "hour";
    var peg$c18 = "a";
    var peg$c19 = "minute";
    var peg$c20 = "day";
    var peg$c21 = "week";
    var peg$c22 = "month";
    var peg$c23 = "year";
    var peg$c24 = "m";
    var peg$c25 = "h";
    var peg$c26 = "d";
    var peg$c27 = "w";
    var peg$c28 = "y";
    var peg$c29 = "s";
    var peg$c30 = "every";
    var peg$c31 = "everyday";
    var peg$c32 = "weekend";
    var peg$c33 = "end";
    var peg$c34 = "of";
    var peg$c35 = "in";
    var peg$c36 = "starting";
    var peg$c37 = "until";
    var peg$c38 = "at";
    var peg$c39 = "on";
    var peg$c40 = "for";
    var peg$c41 = "today";
    var peg$c42 = "tomorrow";
    var peg$c43 = "next";
    var peg$c44 = "quarter";
    var peg$c45 = "/";
    var peg$c46 = "3";
    var peg$c47 = "monday";
    var peg$c48 = "tuesday";
    var peg$c49 = "wednesday";
    var peg$c50 = "thursday";
    var peg$c51 = "friday";
    var peg$c52 = "saturday";
    var peg$c53 = "sunday";
    var peg$c54 = "january";
    var peg$c55 = "february";
    var peg$c56 = "march";
    var peg$c57 = "april";
    var peg$c58 = "may";
    var peg$c59 = "june";
    var peg$c60 = "july";
    var peg$c61 = "august";
    var peg$c62 = "september";
    var peg$c63 = "october";
    var peg$c64 = "november";
    var peg$c65 = "december";
    var peg$c66 = "2";
    var peg$c67 = "0";
    var peg$c68 = "morning";
    var peg$c69 = "after";
    var peg$c70 = "wake";
    var peg$c71 = "up";
    var peg$c72 = "this";
    var peg$c73 = "afternoon";
    var peg$c74 = "lunch";
    var peg$c75 = "evening";
    var peg$c76 = "work";
    var peg$c77 = "night";
    var peg$c78 = "diner";
    var peg$c79 = "tonight";
    var peg$c80 = ":";

    var peg$r0 = /^[ ]/;
    var peg$r1 = /^[0-9]/;
    var peg$r2 = /^[0-1]/;
    var peg$r3 = /^[0-2]/;
    var peg$r4 = /^[0-4]/;
    var peg$r5 = /^[1-5]/;

    var peg$e0 = peg$otherExpectation("space");
    var peg$e1 = peg$classExpectation([" "], false, false);
    var peg$e2 = peg$otherExpectation("number");
    var peg$e3 = peg$classExpectation([["0", "9"]], false, false);
    var peg$e4 = peg$literalExpectation("one", true);
    var peg$e5 = peg$literalExpectation("two", true);
    var peg$e6 = peg$literalExpectation("three", true);
    var peg$e7 = peg$literalExpectation("four", true);
    var peg$e8 = peg$literalExpectation("five", true);
    var peg$e9 = peg$literalExpectation("six", true);
    var peg$e10 = peg$literalExpectation("seven", true);
    var peg$e11 = peg$literalExpectation("eight", true);
    var peg$e12 = peg$literalExpectation("nine", true);
    var peg$e13 = peg$literalExpectation("ten", true);
    var peg$e14 = peg$literalExpectation("eleven", true);
    var peg$e15 = peg$literalExpectation("twelve", true);
    var peg$e16 = peg$otherExpectation("one..twelve");
    var peg$e17 = peg$literalExpectation("1", false);
    var peg$e18 = peg$otherExpectation("% times");
    var peg$e19 = peg$otherExpectation("once..thrice");
    var peg$e20 = peg$literalExpectation("once", false);
    var peg$e21 = peg$literalExpectation("twice", false);
    var peg$e22 = peg$literalExpectation("thrice", false);
    var peg$e23 = peg$literalExpectation("an", true);
    var peg$e24 = peg$literalExpectation("hour", true);
    var peg$e25 = peg$literalExpectation("a", true);
    var peg$e26 = peg$otherExpectation("char");
    var peg$e27 = peg$anyExpectation();
    var peg$e28 = peg$otherExpectation("word");
    var peg$e29 = peg$otherExpectation("sentence");
    var peg$e30 = peg$literalExpectation("minute", true);
    var peg$e31 = peg$literalExpectation("day", true);
    var peg$e32 = peg$literalExpectation("week", true);
    var peg$e33 = peg$literalExpectation("month", true);
    var peg$e34 = peg$literalExpectation("year", true);
    var peg$e35 = peg$literalExpectation("m", true);
    var peg$e36 = peg$literalExpectation("h", true);
    var peg$e37 = peg$literalExpectation("d", true);
    var peg$e38 = peg$literalExpectation("w", true);
    var peg$e39 = peg$literalExpectation("y", true);
    var peg$e40 = peg$literalExpectation("s", true);
    var peg$e41 = peg$literalExpectation("every", true);
    var peg$e42 = peg$literalExpectation("everyday", true);
    var peg$e43 = peg$literalExpectation("weekend", true);
    var peg$e44 = peg$literalExpectation("s", false);
    var peg$e45 = peg$literalExpectation("end", false);
    var peg$e46 = peg$literalExpectation("of", false);
    var peg$e47 = peg$literalExpectation("in", true);
    var peg$e48 = peg$literalExpectation("starting", true);
    var peg$e49 = peg$literalExpectation("until", true);
    var peg$e50 = peg$literalExpectation("at", true);
    var peg$e51 = peg$literalExpectation("on", true);
    var peg$e52 = peg$literalExpectation("for", true);
    var peg$e53 = peg$otherExpectation("relative date");
    var peg$e54 = peg$literalExpectation("today", true);
    var peg$e55 = peg$literalExpectation("tomorrow", true);
    var peg$e56 = peg$literalExpectation("next", true);
    var peg$e57 = peg$literalExpectation("week", false);
    var peg$e58 = peg$literalExpectation("month", false);
    var peg$e59 = peg$literalExpectation("quarter", false);
    var peg$e60 = peg$literalExpectation("year", false);
    var peg$e61 = peg$literalExpectation("/", false);
    var peg$e62 = peg$otherExpectation("0..31");
    var peg$e63 = peg$literalExpectation("3", false);
    var peg$e64 = peg$classExpectation([["0", "1"]], false, false);
    var peg$e65 = peg$classExpectation([["0", "2"]], false, false);
    var peg$e66 = peg$otherExpectation("monday...sunday");
    var peg$e67 = peg$literalExpectation("monday", true);
    var peg$e68 = peg$literalExpectation("tuesday", true);
    var peg$e69 = peg$literalExpectation("wednesday", true);
    var peg$e70 = peg$literalExpectation("thursday", true);
    var peg$e71 = peg$literalExpectation("friday", true);
    var peg$e72 = peg$literalExpectation("saturday", true);
    var peg$e73 = peg$literalExpectation("sunday", true);
    var peg$e74 = peg$otherExpectation("0..12");
    var peg$e75 = peg$otherExpectation("february..december");
    var peg$e76 = peg$literalExpectation("january", true);
    var peg$e77 = peg$literalExpectation("february", true);
    var peg$e78 = peg$literalExpectation("march", true);
    var peg$e79 = peg$literalExpectation("april", true);
    var peg$e80 = peg$literalExpectation("may", true);
    var peg$e81 = peg$literalExpectation("june", true);
    var peg$e82 = peg$literalExpectation("july", true);
    var peg$e83 = peg$literalExpectation("august", true);
    var peg$e84 = peg$literalExpectation("september", true);
    var peg$e85 = peg$literalExpectation("october", true);
    var peg$e86 = peg$literalExpectation("november", true);
    var peg$e87 = peg$literalExpectation("december", true);
    var peg$e88 = peg$otherExpectation("year number");
    var peg$e89 = peg$otherExpectation("0..24");
    var peg$e90 = peg$literalExpectation("2", false);
    var peg$e91 = peg$classExpectation([["0", "4"]], false, false);
    var peg$e92 = peg$literalExpectation("0", false);
    var peg$e93 = peg$otherExpectation("00..59");
    var peg$e94 = peg$classExpectation([["1", "5"]], false, false);
    var peg$e95 = peg$literalExpectation("morning", true);
    var peg$e96 = peg$literalExpectation("after", false);
    var peg$e97 = peg$literalExpectation("wake", false);
    var peg$e98 = peg$literalExpectation("up", false);
    var peg$e99 = peg$literalExpectation("this", false);
    var peg$e100 = peg$literalExpectation("morning", false);
    var peg$e101 = peg$literalExpectation("afternoon", true);
    var peg$e102 = peg$literalExpectation("after", true);
    var peg$e103 = peg$literalExpectation("lunch", true);
    var peg$e104 = peg$literalExpectation("this", true);
    var peg$e105 = peg$literalExpectation("evening", true);
    var peg$e106 = peg$literalExpectation("work", true);
    var peg$e107 = peg$literalExpectation("night", true);
    var peg$e108 = peg$literalExpectation("diner", true);
    var peg$e109 = peg$literalExpectation("tonight", true);
    var peg$e110 = peg$otherExpectation("%m/h/d/w/y");
    var peg$e111 = peg$literalExpectation("h", false);
    var peg$e112 = peg$otherExpectation("0..24:0..59");
    var peg$e113 = peg$literalExpectation(":", false);
    var peg$e114 = peg$otherExpectation("% minute..year(s)");
    var peg$e115 = peg$otherExpectation("(n)mhdwy");

    var peg$f0 = function(head, tail) {
    		let words = []
    		return tail.reduce((acc, [,x]) => {
    			if (typeof x == "object") {
    				return { ...acc, ...x }
    			} else {
    				words.push(x)
    				return { ...acc, subject: [head, ...words].join(" ") }
    			}
    		}, { subject: head })
    	};
    var peg$f1 = function() { };
    var peg$f2 = function() { return parseInt(text(), 10) };
    var peg$f3 = function() { return 1 };
    var peg$f4 = function() { return 2 };
    var peg$f5 = function() { return 3 };
    var peg$f6 = function() { return 4 };
    var peg$f7 = function() { return 5 };
    var peg$f8 = function() { return 6 };
    var peg$f9 = function() { return 7 };
    var peg$f10 = function() { return 8 };
    var peg$f11 = function() { return 9 };
    var peg$f12 = function() { return 10 };
    var peg$f13 = function() { return 11 };
    var peg$f14 = function() { return 12 };
    var peg$f15 = function() { return  1 };
    var peg$f16 = function(value) { return value };
    var peg$f17 = function(value) { return  value };
    var peg$f18 = function(expr) { return { freq: RRule.HOURLY, interval: 1, } };
    var peg$f19 = function(interval, unit) {
    		return getRecurrencyFromUnit(unit, { interval })
    	};
    var peg$f20 = function() { return text() };
    var peg$f21 = function() { return "minute" };
    var peg$f22 = function() { return "hour" };
    var peg$f23 = function() { return "day" };
    var peg$f24 = function() { return "week" };
    var peg$f25 = function() { return "year" };
    var peg$f26 = function(expr) { return expr };
    var peg$f27 = function(expr, _for, dtstart) {
    		return {
    			...expr,
    			...(dtstart && {
    					dtstart: dtstart[1]
    				}),
    			...(_for && _for[1] )
    		}
    	};
    var peg$f28 = function(dtstart, at, _for) {
    		const forExp = _for && _for[1]
    		if (at) return {
    			...forExp,
    			dtstart: setTime(startOfDay(dtstart), at[1]),
    			freq: RRule.DAILY,
    			byhour: 0,
    			count: 1
    		}
    		return {
    			...forExp,
    			dtstart,
    			count: 1
    		}
    	};
    var peg$f29 = function(at) {
    		return {
    			dtstart: setTime(NOW, at),
    			byhour: 0,
    			count: 1
    		}
    	};
    var peg$f30 = function(at, _for) {
    		return {
    			dtstart: setTime(NOW, at),
    			byhour: 0,
    			count: 1
    		}
    	};
    var peg$f31 = function(expr, _for) {
    		return {
    			...expr,
    			...(_for && {
    				dtstart: _for[1],
    				byhour: 0,
    				count: 1
    			})
    		}
    	};
    var peg$f32 = function(every, at) {
    		return {
    			...every,
    			...(at && at[1])
    		}
    	};
    var peg$f33 = function() { return { freq: RRule.DAILY } };
    var peg$f34 = function(expr) {
    		return {
    			freq: RRule.YEARLY,
    			bymonthday: expr.getDate(),
    			bymonth: expr.getMonth() + 1,
    			byhour: 0,
    		}
    	};
    var peg$f35 = function() { return { freq: RRule.WEEKLY, byweekday: getWeekDayByName("saturday") - 1 } };
    var peg$f36 = function(interval, expr) {
    		return {
    			freq: RRule.WEEKLY,
    			byweekday: getWeekDayByName(expr) - 1,
    			byhour: 0,
    			interval
    	} };
    var peg$f37 = function(expr) {
    		return {
    			freq: RRule.WEEKLY,
    			byweekday: getWeekDayByName(expr) - 1,
    			byhour: 0,
    		}
    	};
    var peg$f38 = function(expr) {
    		return {
    			freq: RRule.MONTHLY,
    			bymonth: getMonthByName(expr),
    			bymonthday: 1,
    			byhour: 0,
    		}
    	};
    var peg$f39 = function(expr) {
    		return {
    			freq: RRule.MONTHLY,
    			bymonth: getMonthByName(expr),
    			bymonthday: -1,
    			byhour: 0,
    		}
    	};
    var peg$f40 = function(expr) { return getRecurrencyFromUnit(expr) };
    var peg$f41 = function(expr) {
    		switch (expr.unit) {
    			case "minute": return getRecurrencyFromUnit(expr.unit, { dtstart: addMinutes(NOW, expr.duration) })
    			case "hour": return getRecurrencyFromUnit(expr.unit, { dtstart: addHours(NOW, expr.duration) })
    			case "day": return getRecurrencyFromUnit(expr.unit, { dtstart: addDays(NOW, expr.duration) })
    			case "week": return getRecurrencyFromUnit(expr.unit, { dtstart: addWeeks(NOW, expr.duration) })
    			case "month": return getRecurrencyFromUnit(expr.unit, { dtstart: addMonths(NOW, expr.duration) })
    			case "year": return getRecurrencyFromUnit(expr.unit, { dtstart: addYears(NOW, expr.duration) })
    			default: throw new Error(`unknown duration ${expr.duration}`)
    		}
    	};
    var peg$f42 = function(expr) { return setTime(startOfDay(NOW), expr)  };
    var peg$f43 = function(time) {
    		return Object.keys(time).reduce((res, key) => ({
    			...res,
    			["by" + key]: time[key]
    		}), {})
    	};
    var peg$f44 = function(expr) { return { duration: expr } };
    var peg$f45 = function() { return startOfDay(NOW) };
    var peg$f46 = function() { return startOfDay(addHours(NOW, 24)) };
    var peg$f47 = function() {
    		let current = NOW
    		while (!isWeekend(current)) {
    			current = addHours(current, 24)
    		}
    		return startOfDay(current)
    	};
    var peg$f48 = function() { return startOfWeek(addWeeks(NOW, 1), { weekStartsOn: options.weekStartsOn }) };
    var peg$f49 = function() { return startOfMonth(addMonths(NOW, 1)) };
    var peg$f50 = function() { return startOfMonth(addMonths(NOW, 4)) };
    var peg$f51 = function() { return startOfYear(addYears(NOW, 1)) };
    var peg$f52 = function(dayName) {
    		let current = NOW
    		const weekDay = getWeekDayByName(dayName)
    		while (current.getDay() !== weekDay) {
    			current = addHours(current, 24)
    		}
    		return current
    	 };
    var peg$f53 = function(day, month) { return new Date(NOW.getFullYear(), month - 1, day) };
    var peg$f54 = function(day, monthName) { return new Date(NOW.getFullYear(), getMonthByName(monthName) - 1, day) };
    var peg$f55 = function(day, month, year) { return new Date(year, month - 1, day)  };
    var peg$f56 = function(name) { return name };
    var peg$f57 = function() {  return parseInt(text(), 10) };
    var peg$f58 = function(monthName) { return getMonthByName(monthName) };
    var peg$f59 = function() { return { hour: 9, minute: 0 } };
    var peg$f60 = function() { return { hour: 15, minute: 0 } };
    var peg$f61 = function() { return { hour: 18, minute: 0 } };
    var peg$f62 = function() { return { hour: 22, minute: 0 } };
    var peg$f63 = function(hour) { return { hour, minute: 0 } };
    var peg$f64 = function(hour, minute) { return { hour, minute } };
    var peg$f65 = function(duration, unit) { return { duration, unit } };
    var peg$f66 = function(duration) { return { freq: getFreqByUnit(duration.unit), interval: duration.duration } };
    var peg$f67 = function(duration) {
    		switch(duration.unit) {
    			case "minute": return duration.duration
    			case "hour": return duration.duration * 60
    			case "day": return duration.duration * 60 * 24
    			case "week":return duration.duration * 60 * 24 * 7
    			case "month": return duration.duration * 60 * 24 * 7 * 4
    			case "year": return duration.duration * 60 * 24 * 7 * 4 * 12
    		}
    		throw new Error("unknown time unit: " + duration.unit)
    	};

    var peg$currPos = 0;
    var peg$savedPos = 0;
    var peg$posDetailsCache = [{ line: 1, column: 1 }];
    var peg$maxFailPos = 0;
    var peg$maxFailExpected = [];
    var peg$silentFails = 0;

    var peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function offset() {
      return peg$savedPos;
    }

    function range() {
      return {
        source: peg$source,
        start: peg$savedPos,
        end: peg$currPos
      };
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== undefined
        ? location
        : peg$computeLocation(peg$savedPos, peg$currPos);

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== undefined
        ? location
        : peg$computeLocation(peg$savedPos, peg$currPos);

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos];
      var p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line: details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;

        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos);
      var endPosDetails = peg$computePosDetails(endPos);

      return {
        source: peg$source,
        start: {
          offset: startPos,
          line: startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line: endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseRoot() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$parseTimeConstructExpr();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseWord();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTimeConstructExpr();
            if (s5 === peg$FAILED) {
              s5 = peg$parseWord();
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseTimeConstructExpr();
              if (s5 === peg$FAILED) {
                s5 = peg$parseWord();
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          peg$savedPos = s0;
          s0 = peg$f0(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$r0.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f1();
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }

      return s0;
    }

    function peg$parseNumber() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$r1.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$r1.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f2();
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }

      return s0;
    }

    function peg$parseTextualOne() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c0) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f3();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTextualTwo() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c1) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f4();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTextualThree() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c2) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f5();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTextualFour() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c3) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f6();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTextualFive() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c4) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f7();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTextualSix() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c5) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f8();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTextualSeven() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c6) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f9();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTextualEight() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c7) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f10();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTextualNine() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c8) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f11();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTextualTen() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c9) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e13); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f12();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTextualEleven() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c10) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f13();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTextualTwelve() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f14();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTextualNumber() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseTextualOne();
      if (s0 === peg$FAILED) {
        s0 = peg$parseTextualTwo();
        if (s0 === peg$FAILED) {
          s0 = peg$parseTextualThree();
          if (s0 === peg$FAILED) {
            s0 = peg$parseTextualFour();
            if (s0 === peg$FAILED) {
              s0 = peg$parseTextualFive();
              if (s0 === peg$FAILED) {
                s0 = peg$parseTextualSix();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseTextualSeven();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseTextualEight();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseTextualNine();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseTextualTen();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseTextualEleven();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseTextualTwelve();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e16); }
      }

      return s0;
    }

    function peg$parseNumberExpr() {
      var s0;

      s0 = peg$parseNumber();
      if (s0 === peg$FAILED) {
        s0 = peg$parseTextualNumber();
      }

      return s0;
    }

    function peg$parseOneExpr() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseTextualOne();
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 49) {
          s1 = peg$c12;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f15();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseNumericOccurenceExpr() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseOneExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f3();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNumberExpr();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f16(s1);
        }
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }

      return s0;
    }

    function peg$parseTextualOcurrenceExpr() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c13) {
        s1 = peg$c13;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f3();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c14) {
          s1 = peg$c14;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f4();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c15) {
            s1 = peg$c15;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f5();
          }
          s0 = s1;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }

      return s0;
    }

    function peg$parseCountExpr() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseNumericOccurenceExpr();
      if (s1 === peg$FAILED) {
        s1 = peg$parseTextualOcurrenceExpr();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f17(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseRecurrencyExpr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseCountExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c16) {
            s3 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c17) {
                s5 = input.substr(peg$currPos, 4);
                peg$currPos += 4;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e24); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f18(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCountExpr();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 1).toLowerCase() === peg$c18) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e25); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseUnitTimeExpr();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f19(s1, s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseChar() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parse_();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f20();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }

      return s0;
    }

    function peg$parseWord() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseChar();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseChar();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseChar();
        }
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f20();
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e28); }
      }

      return s0;
    }

    function peg$parseSentence() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseWord();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseWord();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseWord();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f20();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }

      return s0;
    }

    function peg$parseUnitMinute() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c19) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e30); }
      }

      return s0;
    }

    function peg$parseUnitHour() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c17) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }

      return s0;
    }

    function peg$parseUnitDay() {
      var s0;

      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c20) {
        s0 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e31); }
      }

      return s0;
    }

    function peg$parseUnitWeek() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c21) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e32); }
      }

      return s0;
    }

    function peg$parseUnitMonth() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c22) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }

      return s0;
    }

    function peg$parseUnitYear() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c23) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }

      return s0;
    }

    function peg$parseUnitTime() {
      var s0;

      s0 = peg$parseUnitMinute();
      if (s0 === peg$FAILED) {
        s0 = peg$parseUnitHour();
        if (s0 === peg$FAILED) {
          s0 = peg$parseUnitDay();
          if (s0 === peg$FAILED) {
            s0 = peg$parseUnitWeek();
            if (s0 === peg$FAILED) {
              s0 = peg$parseUnitMonth();
              if (s0 === peg$FAILED) {
                s0 = peg$parseUnitYear();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseUnitTimeShort() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c24) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 1).toLowerCase() === peg$c25) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e36); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f22();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 1).toLowerCase() === peg$c26) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e37); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f23();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 1).toLowerCase() === peg$c27) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e38); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f24();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 1).toLowerCase() === peg$c28) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e39); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f25();
              }
              s0 = s1;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseUnitTimePlural() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUnitTime();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 1).toLowerCase() === peg$c29) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e40); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f26(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseUnitTimeExpr() {
      var s0;

      s0 = peg$parseUnitTimePlural();
      if (s0 === peg$FAILED) {
        s0 = peg$parseUnitTime();
        if (s0 === peg$FAILED) {
          s0 = peg$parseUnitTimeShort();
        }
      }

      return s0;
    }

    function peg$parseTimeConstructExpr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseRecurringExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseForExpr();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseStartingExpr();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f27(s1, s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDateExpr();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseAtTimeExpr();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseForExpr();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f28(s1, s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseTimeOfTheDayExpr();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f29(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseAtTimeExpr();
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parse_();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseForExpr();
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                s2 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f30(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseInExpr();
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseForExpr();
                  if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
                if (s2 === peg$FAILED) {
                  s2 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f31(s1, s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseRecurringExpr() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseEveryExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseRecurringAtTimeExpr();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f32(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseRecurrencyExpr();
      }

      return s0;
    }

    function peg$parseEveryExpr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c30) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEverySubExpr();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f26(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c31) {
          s1 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e42); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f33();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseEverySubExpr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseDateShort();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f34(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c32) {
          s1 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e43); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f35();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseNumberExpr();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseDayName();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 115) {
                  s4 = peg$c29;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e44); }
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f36(s1, s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseDayName();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f37(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseMonthName();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f38(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c33) {
                  s1 = peg$c33;
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e45); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  if (s2 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c34) {
                      s3 = peg$c34;
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e46); }
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse_();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseMonthName();
                        if (s5 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f39(s5);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$parseTimeOfTheDayExpr();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseDistance();
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseUnitTime();
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f40(s1);
                      }
                      s0 = s1;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseInExpr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c35) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e47); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDuration();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f41(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseStartingExpr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c36) {
        s1 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDateExpr();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f26(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseUntilExpr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c37) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e49); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDateExpr();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f26(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAtTimeExpr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c38) {
        s2 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parseTimeOfTheDayExpr();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f26(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c38) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e50); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseAtTimeSubExpr();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f26(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseAtTimeSubExpr() {
      var s0, s1;

      s0 = peg$parseTimeExpr();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTimeOfTheDayExpr();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f42(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseRecurringAtTimeExpr() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseAtTimeExpr();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f43(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOnExpr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c39) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e51); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDateShort();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f26(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseForExpr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c40) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e52); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDurationAsMinutes();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f44(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDateRelative() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c41) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f45();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c42) {
          s1 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e55); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f46();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c32) {
            s1 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e43); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f47();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$parseNextDateExpr();
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e53); }
      }

      return s0;
    }

    function peg$parseNextDateExpr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c43) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e56); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c39) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e51); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseNextDateSubExpr();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f26(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNextDateSubExpr() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c21) {
        s1 = peg$c21;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e57); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f48();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c22) {
          s1 = peg$c22;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e58); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f49();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 7) === peg$c44) {
            s1 = peg$c44;
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e59); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f50();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c23) {
              s1 = peg$c23;
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e60); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f51();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseDayName();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f52(s1);
              }
              s0 = s1;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseDateShort() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDayNumber();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s2 = peg$c45;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e61); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseMonthNumber();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f53(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDayNumber();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseMonthName();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f54(s1, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseDateFull() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseDayNumber();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s2 = peg$c45;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e61); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseMonthExpr();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s4 = peg$c45;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e61); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseYearFull();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f55(s1, s3, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDateExpr() {
      var s0;

      s0 = peg$parseDateRelative();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDateFull();
        if (s0 === peg$FAILED) {
          s0 = peg$parseDateShort();
        }
      }

      return s0;
    }

    function peg$parseDayNumber() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 51) {
        s2 = peg$c46;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e63); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e64); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e65); }
        }
        if (s2 !== peg$FAILED) {
          if (peg$r1.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          if (peg$r1.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f2();
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e62); }
      }

      return s0;
    }

    function peg$parseDayName() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c47) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e67); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c48) {
          s1 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e68); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c49) {
            s1 = input.substr(peg$currPos, 9);
            peg$currPos += 9;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e69); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c50) {
              s1 = input.substr(peg$currPos, 8);
              peg$currPos += 8;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e70); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c51) {
                s1 = input.substr(peg$currPos, 6);
                peg$currPos += 6;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e71); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 8).toLowerCase() === peg$c52) {
                  s1 = input.substr(peg$currPos, 8);
                  peg$currPos += 8;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e72); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c53) {
                    s1 = input.substr(peg$currPos, 6);
                    peg$currPos += 6;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e73); }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f56(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e66); }
      }

      return s0;
    }

    function peg$parseMonthNumber() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 49) {
        s2 = peg$c12;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e65); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f57();
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e74); }
      }

      return s0;
    }

    function peg$parseMonthName() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c54) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e76); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c55) {
          s1 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e77); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c56) {
            s1 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e78); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c57) {
              s1 = input.substr(peg$currPos, 5);
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e79); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c58) {
                s1 = input.substr(peg$currPos, 3);
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e80); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c59) {
                  s1 = input.substr(peg$currPos, 4);
                  peg$currPos += 4;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e81); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c60) {
                    s1 = input.substr(peg$currPos, 4);
                    peg$currPos += 4;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e82); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c61) {
                      s1 = input.substr(peg$currPos, 6);
                      peg$currPos += 6;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e83); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c62) {
                        s1 = input.substr(peg$currPos, 9);
                        peg$currPos += 9;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e84); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c63) {
                          s1 = input.substr(peg$currPos, 7);
                          peg$currPos += 7;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e85); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c64) {
                            s1 = input.substr(peg$currPos, 8);
                            peg$currPos += 8;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e86); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c65) {
                              s1 = input.substr(peg$currPos, 8);
                              peg$currPos += 8;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e87); }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f56(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e75); }
      }

      return s0;
    }

    function peg$parseMonthExpr() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseMonthName();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f58(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parseMonthNumber();
      }

      return s0;
    }

    function peg$parseYearFull() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      if (peg$r1.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s1 !== peg$FAILED) {
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s2 !== peg$FAILED) {
          if (peg$r1.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s3 !== peg$FAILED) {
            if (peg$r1.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f2();
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e88); }
      }

      return s0;
    }

    function peg$parseTimeHour() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 50) {
        s2 = peg$c66;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e90); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$r4.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e91); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c67;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e92); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 49) {
          s3 = peg$c12;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
        if (s3 !== peg$FAILED) {
          if (peg$r1.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          if (peg$r1.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f2();
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e89); }
      }

      return s0;
    }

    function peg$parseTimeMinute() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$r5.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e94); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c67;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e92); }
        }
        if (s2 !== peg$FAILED) {
          if (peg$r1.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f2();
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e93); }
      }

      return s0;
    }

    function peg$parseTimeOfTheDayExpr() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c68) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e95); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c69) {
          s2 = peg$c69;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e96); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c70) {
              s4 = peg$c70;
              peg$currPos += 4;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e97); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c71) {
                  s6 = peg$c71;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e98); }
                }
                if (s6 !== peg$FAILED) {
                  s2 = [s2, s3, s4, s5, s6];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c72) {
            s2 = peg$c72;
            peg$currPos += 4;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e99); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c68) {
                s4 = peg$c68;
                peg$currPos += 7;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e100); }
              }
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f59();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c73) {
          s1 = input.substr(peg$currPos, 9);
          peg$currPos += 9;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e101); }
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c69) {
            s2 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e102); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c74) {
                s4 = input.substr(peg$currPos, 5);
                peg$currPos += 5;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e103); }
              }
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c72) {
              s2 = input.substr(peg$currPos, 4);
              peg$currPos += 4;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e104); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              if (s3 !== peg$FAILED) {
                if (input.substr(peg$currPos, 9).toLowerCase() === peg$c73) {
                  s4 = input.substr(peg$currPos, 9);
                  peg$currPos += 9;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e101); }
                }
                if (s4 !== peg$FAILED) {
                  s2 = [s2, s3, s4];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f60();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c75) {
            s1 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e105); }
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c69) {
              s2 = input.substr(peg$currPos, 5);
              peg$currPos += 5;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e102); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              if (s3 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c76) {
                  s4 = input.substr(peg$currPos, 4);
                  peg$currPos += 4;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e106); }
                }
                if (s4 !== peg$FAILED) {
                  s2 = [s2, s3, s4];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c72) {
                s2 = input.substr(peg$currPos, 4);
                peg$currPos += 4;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e104); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 7).toLowerCase() === peg$c75) {
                    s4 = input.substr(peg$currPos, 7);
                    peg$currPos += 7;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e105); }
                  }
                  if (s4 !== peg$FAILED) {
                    s2 = [s2, s3, s4];
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f61();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c77) {
              s1 = input.substr(peg$currPos, 5);
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e107); }
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c69) {
                s2 = peg$c69;
                peg$currPos += 5;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e96); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 5).toLowerCase() === peg$c78) {
                    s4 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e108); }
                  }
                  if (s4 !== peg$FAILED) {
                    s2 = [s2, s3, s4];
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c79) {
                  s1 = input.substr(peg$currPos, 7);
                  peg$currPos += 7;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e109); }
                }
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f62();
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parseTimeShort() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseTimeHour();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 104) {
          s3 = peg$c25;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e111); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f63(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e110); }
      }

      return s0;
    }

    function peg$parseTimeLong() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseTimeHour();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c80;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e113); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTimeMinute();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f64(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e112); }
      }

      return s0;
    }

    function peg$parseTimeExpr() {
      var s0;

      s0 = peg$parseTimeLong();
      if (s0 === peg$FAILED) {
        s0 = peg$parseTimeShort();
      }

      return s0;
    }

    function peg$parseDuration() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseTextualOne();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseUnitTime();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f65(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNumberExpr();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseUnitTimePlural();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f65(s1, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseNumberExpr();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseUnitTimeShort();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f65(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e114); }
      }

      return s0;
    }

    function peg$parseDistance() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseDuration();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f66(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDurationAsMinutes() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseDuration();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f67(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e115); }
      }

      return s0;
    }


    	const {
    		startOfDay, startOfWeek, startOfMonth, startOfYear,
    		endOfDay, endOfWeek, endOfMonth, endOfYear,
    		addHours, addMinutes, addDays, addWeeks, addMonths, addYears,
    		setDay, setMonth, setHours, setMinutes,
    		getHours, getMinutes,
    		isSameMonth, isSameWeek, isWeekend,
    		nextDay
    	} = require('date-fns')

    	const RRule = require("rrule").default

    	function addTime(date, time = {}) {
    		const { hour = 0, minute = 0 } = time
    		return addHours(addMinutes(date, minute), hour)
    	}

    	function setTime(date, time = {}) {
    		const { hour = 0, minute = 0 } = time
    		return setHours(setMinutes(date, minute), hour)
    	}

    	function getWeekDayByName(name) {
    		return ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'].indexOf(name.toLowerCase())
    	}

    	function getMonthByName(name){
    		return ["january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"].indexOf(name.toLowerCase()) + 1
    	}

    	function getFreqByUnit(name){
    		switch (name) {
    			case "minute": return RRule.MINUTELY
    			case "hour": return RRule.HOURLY
    			case "day": return RRule.DAILY
    			case "week": return RRule.WEEKLY
    			case "month": return RRule.MONTHLY
    			case "year": return RRule.YEARLY
    		}
    		throw new Error(`invalid time unit: ${name}`)
    	}

    		// switch (freq) {
    		// 	case "minute": return { freq: getFreqByUnit(freq), interval,  }
    		// 	case "hour": return { freq: getFreqByUnit(freq), interval, byhour: 0,  }
    		// 	case "day": return { freq: getFreqByUnit(freq), interval, bymonthday: 1, byhour: 0,  }
    		// 	case "week": return { freq: getFreqByUnit(freq), interval, byweekday: getWeekDayByName("monday") - 1, byhour: 0,  }
    		// 	case "month": return { freq: getFreqByUnit(freq), interval, bymonthday: 1, byhour: 0,  }
    		// 	case "year": return { freq: getFreqByUnit(freq), interval, bymonth: 1, bymonthday: 1, byhour: 0,  }
    		// }

    	function getRecurrencyFromUnit(expr, other = {}) {
    		const freq = getFreqByUnit(expr)
    		switch (expr) {
    			case "minute": return { freq, ...other }
    			case "hour": return { freq, ...other }
    			case "day": return { freq, byhour: 0, ...other }
    			case "week": return { freq, byweekday: options.weekStartsOn - 1, byhour: 0, ...other }
    			case "month": return { freq, bymonthday: 1, byhour: 0, ...other }
    			case "year": return { freq, bymonth: 1, bymonthday: 1, byhour: 0, ...other }
    		}
    		throw new Error(`invalid time unit: ${expr}`)
    	}

    	const NOW = options.now ?? new Date()

    	options.weekStartsOn = options.weekStartsOn || 1


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
});
